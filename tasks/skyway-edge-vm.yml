# Copyright Â© 2018 VMware, Inc. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
---
# These tasks launch a given VM to act as an Edge Gateway

# jq -n --arg userdata "$userdata" --arg network "$network"
#   -f bootstrap-spec.json > bootstrap-spec.edited.json
# govc import.ova -options=bootstrap-spec.edited.json -name=$vm bootstrap.ova
# govc vm.change -vm $vm -nested-hv-enabled=true
# govc vm.change -vm $vm -m=${memory}
# govc vm.change -vm $vm -c=${cpus}
# govc vm.disk.change -vm $vm -size ${disk}
# vm_path="$(govc find / -type m -name "$vm")"


- name: Establish VM name
  set_fact: vm_name="{{ skyway_edge_vm_basename }}-{{ skyway_edge.edge_group }}"
  when:
    - skyway_edge_vm_basename is defined
    - skyway_edge is defined and skyway_edge.edge_group is defined

- name: Establish VM network (default)
  set_fact: vm_network="{{ skyway_edge_vm_network }}"
  when:
    - skyway_edge_vm_network is defined

- name: Establish VM network
  set_fact: vm_network="{{ skyway_edge.vm_network }}"
  when:
    - skyway_edge is defined and skyway_edge.vm_network is defined

- name: Search for expected VM
  command: >
    {{ govc }} find / -type m -name {{ vm_name | quote }}
  environment:
    GOVC_URL: "{{ skyway_edge.vcenter_host }}"
    GOVC_USERNAME: "{{ skyway_edge.vcenter_usr }}"
    GOVC_PASSWORD: "{{ skyway_edge.vcenter_pwd }}"
    GOVC_DATACENTER: "{{ skyway_edge.vcenter_datacenter }}"
    GOVC_DATASTORE: "{{ skyway_edge.vcenter_datastore }}"
    GOVC_CLUSTER: "{{ skyway_edge.vcenter_cluster }}"
    GOVC_RESOURCE_POOL: "{{ skyway_edge.vcenter_rp }}"
    GOVC_INSECURE: "{{ skyway_edge.vcenter_insecure }}"
  register: govc_find_vm
  when: govc is defined

- name: Set VM path fact
  set_fact:
    vm_path: "{{ govc_find_vm.stdout }}"
  when:
    - govc_find_vm is defined and not govc_find_vm.failed
    - vm_name in govc_find_vm.stdout

- name: VM not found for edge, need to make it
  block:
    - name: Download base OVA
      get_url:
        url: "{{ binary_webserver }}/{{ base_ova }}"
        dest: "/tmp/skyway-edge-amd64.ova"
      register: download_base_ova
      when:
        - binary_webserver is defined
        - base_ova is defined

    - name: Download base OVA from internet
      get_url:
        url: "{{ base_ova_origin }}"
        dest: "/tmp/skyway-edge-amd64.ova"
      register: download_base_ova_origin
      when:
        - base_ova_origin is defined
        - download_base_ova is undefined or not download_base_ova.changed
      tags:
        - skip_ansible_lint

    - name: create temporary directory for VM info
      tempfile:
        state: directory
        suffix: govc
      register: govc_temp

    - name: debug generated file path
      debug: msg="Generating files at {{ govc_temp }}"

    - name: debug edge to create
      debug: var="skyway_edge"

    - name: Template out vm userdata
      template:
        src: user-data.yml.j2
        dest: "{{ govc_temp.path }}/user-data.yml"

    - name: Encode userdata
      command: base64 "{{ govc_temp.path }}/user-data.yml"
      register: base64_userdata
      when:
        - userdata is not defined

    - name: Set userdata fact
      set_fact: userdata="{{ base64_userdata.stdout }}"
      when:
        - base64_userdata is defined and not base64_userdata.failed

    - name: Template out vm spec
      template:
        src: vm-spec.json.j2
        dest: "{{ govc_temp.path }}/vm-spec.json"
      when:
        - userdata is defined

    - name: Import ova
      command: >
        {{ govc }} import.ova -options="{{ govc_temp.path }}/vm-spec.json"
        -name={{ vm_name|quote }}
        "/tmp/skyway-edge-amd64.ova"
      environment:
        GOVC_URL: "{{ skyway_edge.vcenter_host }}"
        GOVC_USERNAME: "{{ skyway_edge.vcenter_usr }}"
        GOVC_PASSWORD: "{{ skyway_edge.vcenter_pwd }}"
        GOVC_DATACENTER: "{{ skyway_edge.vcenter_datacenter }}"
        GOVC_DATASTORE: "{{ skyway_edge.vcenter_datastore }}"
        GOVC_CLUSTER: "{{ skyway_edge.vcenter_cluster }}"
        GOVC_RESOURCE_POOL: "{{ skyway_edge.vcenter_rp }}"
        GOVC_INSECURE: "{{ skyway_edge.vcenter_insecure }}"
      register: govc_import_ova
      when: govc is defined

    - name: Now search for created VM
      command: >
        {{ govc }} find / -type m -name {{ vm_name | quote }}
      environment:
        GOVC_URL: "{{ skyway_edge.vcenter_host }}"
        GOVC_USERNAME: "{{ skyway_edge.vcenter_usr }}"
        GOVC_PASSWORD: "{{ skyway_edge.vcenter_pwd }}"
        GOVC_DATACENTER: "{{ skyway_edge.vcenter_datacenter }}"
        GOVC_DATASTORE: "{{ skyway_edge.vcenter_datastore }}"
        GOVC_CLUSTER: "{{ skyway_edge.vcenter_cluster }}"
        GOVC_RESOURCE_POOL: "{{ skyway_edge.vcenter_rp }}"
        GOVC_INSECURE: "{{ skyway_edge.vcenter_insecure }}"
      register: govc_find_vm
      when: govc is defined

    - name: Set VM path fact
      set_fact:
        vm_path: "{{ govc_find_vm.stdout }}"
      when:
        - govc_find_vm is defined and not govc_find_vm.failed
        - vm_name in govc_find_vm.stdout
  when: vm_path is not defined or not vm_path

- name: debug found VM
  debug: msg="Found edge VM {{ vm_path }}"

- name: Is VM powered on?
  command: >
    {{ govc }} object.collect -s "{{ vm_path }}" runtime.powerState
  environment:
    GOVC_URL: "{{ skyway_edge.vcenter_host }}"
    GOVC_USERNAME: "{{ skyway_edge.vcenter_usr }}"
    GOVC_PASSWORD: "{{ skyway_edge.vcenter_pwd }}"
    GOVC_DATACENTER: "{{ skyway_edge.vcenter_datacenter }}"
    GOVC_DATASTORE: "{{ skyway_edge.vcenter_datastore }}"
    GOVC_CLUSTER: "{{ skyway_edge.vcenter_cluster }}"
    GOVC_RESOURCE_POOL: "{{ skyway_edge.vcenter_rp }}"
    GOVC_INSECURE: "{{ skyway_edge.vcenter_insecure }}"
  register: is_vm_on
  when: govc is defined and vm_path is defined

- name: Power it on
  command: >
    {{ govc }} vm.power -on {{ vm_name|quote }}
  environment:
    GOVC_URL: "{{ skyway_edge.vcenter_host }}"
    GOVC_USERNAME: "{{ skyway_edge.vcenter_usr }}"
    GOVC_PASSWORD: "{{ skyway_edge.vcenter_pwd }}"
    GOVC_DATACENTER: "{{ skyway_edge.vcenter_datacenter }}"
    GOVC_DATASTORE: "{{ skyway_edge.vcenter_datastore }}"
    GOVC_CLUSTER: "{{ skyway_edge.vcenter_cluster }}"
    GOVC_RESOURCE_POOL: "{{ skyway_edge.vcenter_rp }}"
    GOVC_INSECURE: "{{ skyway_edge.vcenter_insecure }}"
  when: is_vm_on is defined and is_vm_on.stdout != "poweredOn"

- name: Wait for VM to get an IP
  command: >
    {{ govc }} vm.ip {{ vm_name|quote }}
  environment:
    GOVC_URL: "{{ skyway_edge.vcenter_host }}"
    GOVC_USERNAME: "{{ skyway_edge.vcenter_usr }}"
    GOVC_PASSWORD: "{{ skyway_edge.vcenter_pwd }}"
    GOVC_DATACENTER: "{{ skyway_edge.vcenter_datacenter }}"
    GOVC_DATASTORE: "{{ skyway_edge.vcenter_datastore }}"
    GOVC_CLUSTER: "{{ skyway_edge.vcenter_cluster }}"
    GOVC_RESOURCE_POOL: "{{ skyway_edge.vcenter_rp }}"
    GOVC_INSECURE: "{{ skyway_edge.vcenter_insecure }}"
  register: govc_vm_ip
  when: is_vm_on is defined and is_vm_on != "poweredOn"

- name: Remember VM IP
  set_fact:
    vm_ip: "{{ govc_vm_ip.stdout }}"
  when:
    - govc_vm_ip is defined and not govc_vm_ip.failed

- name: debug VM IP
  debug: msg="Edge VM {{ vm_path }} has IP {{ vm_ip }}"

- name: Add new host to group 'greengrass-core' with core ID set.
  add_host:
    name: "{{ vm_ip }}"
    groups: greengrass-core
    greengrass_core_id: "{{ skyway_edge.edge_group }}_Core"
  when:
    - greengrass_group_names is defined
    - skyway_edge.edge_group in greengrass_group_names

- name: Add new host to group 'azure-edge' with Edge name set.
  add_host:
    name: "{{ vm_ip }}"
    groups: azure-edge
    azure_edge_name: "{{ skyway_edge.edge_group }}"
  when:
    - azure_iot_edge_names is defined
    - skyway_edge.edge_group in azure_iot_edge_names
